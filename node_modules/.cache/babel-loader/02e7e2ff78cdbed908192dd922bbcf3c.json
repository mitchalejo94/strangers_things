{"ast":null,"code":"// import Register from \"./Register\"\nexport const apiKey = \"https://strangers-things.herokuapp.com/api/\";\nexport const cohortName = \"2207-FTB-ET-WEB-PT\";\nexport async function fetchPosts() {\n  try {\n    const data = await fetch(`${apiKey}${cohortName}/posts`);\n    const result = await data.json();\n    return result;\n  } catch (error) {}\n}\nexport async function NewPost(token, details) {\n  //* might need to be in a try catch\n\n  const response = await fetch(`${apiKey}${cohortName}/posts`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    },\n    body: JSON.stringify({\n      post: {\n        title: details.title,\n        description: details.description,\n        location: details.location,\n        price: details.price,\n        willDeliver: details.willDeliver\n      }\n    })\n  }).then(response => response.json()).then(result => {\n    console.log(result);\n  }).catch(console.error);\n}\n_c = NewPost;\nexport async function createUser(username, password) {\n  try {\n    const response = await fetch(`${apiKey}${cohortName}/users/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    const {\n      data\n    } = response.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function loginUser(username, password) {\n  try {\n    const response = await fetch(`${apiKey}${cohortName}/users/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    return response;\n  } catch (error) {\n    throw error;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"NewPost\");","map":{"version":3,"names":["apiKey","cohortName","fetchPosts","data","fetch","result","json","error","NewPost","token","details","response","method","headers","Authorization","body","JSON","stringify","post","title","description","location","price","willDeliver","then","console","log","catch","createUser","username","password","user","loginUser"],"sources":["/Users/mitchelalejo/Desktop/Cohort2207/Week13/StrangersThings/src/api/api.js"],"sourcesContent":["// import Register from \"./Register\"\nexport const apiKey = \"https://strangers-things.herokuapp.com/api/\";\nexport const cohortName = \"2207-FTB-ET-WEB-PT\";\n\nexport async function fetchPosts() {\n  try {\n    const data = await fetch(`${apiKey}${cohortName}/posts`);\n    const result = await data.json();\n    return result;\n  } catch (error) {}\n}\n\nexport async function NewPost(token, details) {\n \n    //* might need to be in a try catch\n\n    const response = await fetch(`${apiKey}${cohortName}/posts`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n    body: JSON.stringify({\n        post: {\n            title:details.title,\n            description: details.description,\n            location: details.location,\n            price: details.price,\n            willDeliver: details.willDeliver\n        }\n    })\n  }).then (response=>response.json ())\n  .then(result =>{\n    console.log(result);\n  }).catch(console.error)\n}\n\nexport async function createUser(username, password) {\n  try {\n    const response = await fetch(`${apiKey}${cohortName}/users/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password,\n        },\n      }),\n    });\n    const {data} = response.json()\n    return data\n\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function loginUser(username, password) {\n  try {\n    const response = await fetch(`${apiKey}${cohortName}/users/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password,\n        },\n      }),\n    });\n    return response;\n  } catch (error) {\n    throw error;\n  }\n}\n\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,MAAM,GAAG,6CAA6C;AACnE,OAAO,MAAMC,UAAU,GAAG,oBAAoB;AAE9C,OAAO,eAAeC,UAAU,GAAG;EACjC,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMC,KAAK,CAAE,GAAEJ,MAAO,GAAEC,UAAW,QAAO,CAAC;IACxD,MAAMI,MAAM,GAAG,MAAMF,IAAI,CAACG,IAAI,EAAE;IAChC,OAAOD,MAAM;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE,CAAC;AACnB;AAEA,OAAO,eAAeC,OAAO,CAACC,KAAK,EAAEC,OAAO,EAAE;EAE1C;;EAEA,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAAE,GAAEJ,MAAO,GAAEC,UAAW,QAAO,EAAE;IAC7DW,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAG,UAASL,KAAM;IACjC,CAAC;IACDM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACjBC,IAAI,EAAE;QACFC,KAAK,EAACT,OAAO,CAACS,KAAK;QACnBC,WAAW,EAAEV,OAAO,CAACU,WAAW;QAChCC,QAAQ,EAAEX,OAAO,CAACW,QAAQ;QAC1BC,KAAK,EAAEZ,OAAO,CAACY,KAAK;QACpBC,WAAW,EAAEb,OAAO,CAACa;MACzB;IACJ,CAAC;EACH,CAAC,CAAC,CAACC,IAAI,CAAEb,QAAQ,IAAEA,QAAQ,CAACL,IAAI,EAAG,CAAC,CACnCkB,IAAI,CAACnB,MAAM,IAAG;IACboB,OAAO,CAACC,GAAG,CAACrB,MAAM,CAAC;EACrB,CAAC,CAAC,CAACsB,KAAK,CAACF,OAAO,CAAClB,KAAK,CAAC;AACzB;AAAC,KAvBqBC,OAAO;AAyB7B,OAAO,eAAeoB,UAAU,CAACC,QAAQ,EAAEC,QAAQ,EAAE;EACnD,IAAI;IACF,MAAMnB,QAAQ,GAAG,MAAMP,KAAK,CAAE,GAAEJ,MAAO,GAAEC,UAAW,iBAAgB,EAAE;MACpEW,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDE,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBc,IAAI,EAAE;UACJF,QAAQ,EAAEA,QAAQ;UAClBC,QAAQ,EAAEA;QACZ;MACF,CAAC;IACH,CAAC,CAAC;IACF,MAAM;MAAC3B;IAAI,CAAC,GAAGQ,QAAQ,CAACL,IAAI,EAAE;IAC9B,OAAOH,IAAI;EAEb,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,eAAeyB,SAAS,CAACH,QAAQ,EAAEC,QAAQ,EAAE;EAClD,IAAI;IACF,MAAMnB,QAAQ,GAAG,MAAMP,KAAK,CAAE,GAAEJ,MAAO,GAAEC,UAAW,cAAa,EAAE;MACjEW,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDE,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBc,IAAI,EAAE;UACJF,QAAQ,EAAEA,QAAQ;UAClBC,QAAQ,EAAEA;QACZ;MACF,CAAC;IACH,CAAC,CAAC;IACF,OAAOnB,QAAQ;EACjB,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF;AAAC;AAAA"},"metadata":{},"sourceType":"module"}