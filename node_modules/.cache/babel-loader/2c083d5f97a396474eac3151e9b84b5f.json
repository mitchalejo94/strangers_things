{"ast":null,"code":"// import Register from \"./Register\"\nexport const URL = \"https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT\";\nconst makeHeaders = token => {\n  const headers = {\n    \"Content-Type\": \"application/json\"\n  };\n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n  return headers;\n};\nconst callAPI = async function (endpointPath) {\n  let defaultOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    token,\n    method,\n    body\n  } = defaultOptions;\n  const options = {\n    headers: makeHeaders(token)\n  };\n  if (method) {\n    options.method = method;\n  }\n  if (body) {\n    options.body = JSON.stringify(body);\n  }\n  const response = await fetch(`${URL}${endpointPath}`, options);\n  const result = await response.json();\n  return result;\n};\nexport async function fetchPosts() {\n  try {\n    const data = await fetch(`${URL}/posts`);\n    const result = await data.json();\n    return result;\n  } catch (error) {}\n}\n// export async function NewPost(token, details) {\n\n//     //* might need to be in a try catch\n//         const response = await fetch (`${apiKey}${cohortName}/posts`,{\n//             method:\"POST\",\n//             headers:{\n//                 \"Content-Type\": \"application/json\",\n//                 Authorization: `Bearer ${token}`,\n//             },\n//             body: JSON.stringify({\n//                 post:{\n//                     title:details.title,\n//                     description: details.description,\n//                     location: details.location,\n//                     price: details.price,\n//                     willDeliver: details.willDeliver\n//                 }\n//             })\n//         }).then((response => response.json()))\n//         .then(result => {\n//           console.log(result)\n//         })\n//         .catch(console.error)\n//     }\nexport const NewPost = async (token, title, description, price, location, willDeliver) => {\n  try {\n    const post = {\n      description: description\n    };\n    if (location) {\n      post.location = location;\n    }\n    if (price) {\n      post.price = price;\n    }\n    if (willDeliver) {\n      post.willDeliver = willDeliver;\n    }\n    const {\n      success,\n      error,\n      data\n    } = await callAPI(\"/posts\", {\n      token: token,\n      method: \"POST\",\n      body: {\n        post: {\n          title,\n          description,\n          price,\n          location,\n          willDeliver\n        }\n      }\n    });\n    if (success) {\n      return {\n        error: null,\n        post: data.post\n      };\n    } else {\n      return {\n        error: error.message,\n        post: null\n      };\n    }\n  } catch (error) {\n    console.error(\"Post /posts failed:\", error);\n    return {\n      error: \"Failed to create Post\",\n      post: null\n    };\n  }\n};\n\n//     const response = await fetch(`${apiKey}${cohortName}/posts`, {\n//     method: \"POST\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//       Authorization: `Bearer ${token}`,\n//     },\n//     body: JSON.stringify({\n//         post: {\n//             title:details.title,\n//             description: details.description,\n//             location: details.location,\n//             price: details.price,\n//             willDeliver: details.willDeliver\n//         }\n//     })\n//   }).then (response=>response.json ())\n//   .then(result =>{\n//     console.log(result);\n//   }).catch(console.error)\n_c = NewPost;\nexport async function createUser(username, password) {\n  try {\n    const response = await fetch(`${URL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function loginUser(username, password) {\n  try {\n    const response = await fetch(`${URL}/users/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    console.log(response, \"response\");\n    const data = await response.json();\n    console.log(data, \"data\");\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n// export const addComment = async (token, postId, comment)=>{\n//     try{\n//         const {success, error, data} = await callAPI (`${URL}/posts/${postId}`,{\n//             token: token,\n//             method: \"POST\",\n//             body:{\n//                 comment:{\n//                     content: comment\n//                 }\n\n//             }\n//         })\n//         if(success){\n//             return{\n//                 success:success,\n//                 error: null,\n//                 comment: data.comment,\n//             }\n//         }else{\n//             return{\n//                 success:success,\n//                 error:error.message,\n//                 comment:null\n//             }\n//         }\n//     }catch(error){\n//         console.error(`POST /${URL}/posts/${postId}/comments failed:`, error)\n//         return{\n//             success: success,\n//             error:\"Failed to create comment\",\n//             comment: null\n\n//         };\n//     }\n// }\n\nexport const getGuest = async token => {\n  try {\n    const {\n      success,\n      error,\n      data\n    } = await callAPI('/users/me', {\n      token: token\n    });\n    if (success) {\n      return {\n        error: null,\n        username: data.username\n      };\n    } else {\n      return {\n        error: error.message,\n        username: null\n      };\n    }\n  } catch (error) {\n    console.error('failed to fetch guest', error);\n    return {\n      error: 'Failed to load username information',\n      username: null\n    };\n  }\n};\nexport const deletePost = async (token, postId) => {\n  try {\n    const {\n      success,\n      error,\n      data\n    } = await callAPI(`/posts/${postId}`, {\n      method: \"DELETE\",\n      token: token\n    });\n    if (success) {\n      return {\n        error: null,\n        data: null\n      };\n    } else {\n      return {\n        error: error.message,\n        data: null\n      };\n    }\n  } catch (error) {\n    console.error(\"DELETE /posts/postId failed:\", error);\n    return {\n      error: \"Failed to delete post\",\n      data: null\n    };\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"NewPost\");","map":{"version":3,"names":["URL","makeHeaders","token","headers","callAPI","endpointPath","defaultOptions","method","body","options","JSON","stringify","response","fetch","result","json","fetchPosts","data","error","NewPost","title","description","price","location","willDeliver","post","success","message","console","createUser","username","password","user","loginUser","log","getGuest","deletePost","postId"],"sources":["/Users/mitchelalejo/Desktop/Cohort2207/Week13/StrangersThings/src/api/api.js"],"sourcesContent":["// import Register from \"./Register\"\nexport const URL =\n  \"https://strangers-things.herokuapp.com/api/2207-FTB-ET-WEB-PT\";\n\nconst makeHeaders = (token) => {\n  const headers = {\n    \"Content-Type\": \"application/json\",\n  };\n\n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n  return headers;\n};\n\nconst callAPI = async (endpointPath, defaultOptions = {}) => {\n  const { token, method, body } = defaultOptions;\n\n  const options = {\n    headers: makeHeaders(token),\n  };\n\n  if (method) {\n    options.method = method;\n  }\n\n  if (body) {\n    options.body = JSON.stringify(body);\n  }\n\n  const response = await fetch(`${URL}${endpointPath}`, options);\n  const result = await response.json();\n\n  return result;\n};\nexport async function fetchPosts() {\n  try {\n    const data = await fetch(`${URL}/posts`);\n    const result = await data.json();\n    return result;\n  } catch (error) {}\n}\n// export async function NewPost(token, details) {\n\n//     //* might need to be in a try catch\n//         const response = await fetch (`${apiKey}${cohortName}/posts`,{\n//             method:\"POST\",\n//             headers:{\n//                 \"Content-Type\": \"application/json\",\n//                 Authorization: `Bearer ${token}`,\n//             },\n//             body: JSON.stringify({\n//                 post:{\n//                     title:details.title,\n//                     description: details.description,\n//                     location: details.location,\n//                     price: details.price,\n//                     willDeliver: details.willDeliver\n//                 }\n//             })\n//         }).then((response => response.json()))\n//         .then(result => {\n//           console.log(result)\n//         })\n//         .catch(console.error)\n//     }\nexport const NewPost = async (\n  token,\n  title,\n  description,\n  price,\n  location,\n  willDeliver\n) => {\n  try {\n    const post = {\n      description: description,\n    };\n\n    if (location) {\n      post.location = location;\n    }\n\n    if (price) {\n      post.price = price;\n    }\n\n    if (willDeliver) {\n      post.willDeliver = willDeliver;\n    }\n\n    const { success, error, data } = await callAPI(\"/posts\", {\n      token: token,\n      method: \"POST\",\n      body: {\n        post: {\n          title,\n          description,\n          price,\n          location,\n          willDeliver,\n        },\n      },\n    });\n\n    if (success) {\n      return {\n        error: null,\n        post: data.post,\n      };\n    } else {\n      return {\n        error: error.message,\n        post: null,\n      };\n    }\n  } catch (error) {\n    console.error(\"Post /posts failed:\", error);\n\n    return {\n      error: \"Failed to create Post\",\n      post: null,\n    };\n  }\n};\n\n//     const response = await fetch(`${apiKey}${cohortName}/posts`, {\n//     method: \"POST\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//       Authorization: `Bearer ${token}`,\n//     },\n//     body: JSON.stringify({\n//         post: {\n//             title:details.title,\n//             description: details.description,\n//             location: details.location,\n//             price: details.price,\n//             willDeliver: details.willDeliver\n//         }\n//     })\n//   }).then (response=>response.json ())\n//   .then(result =>{\n//     console.log(result);\n//   }).catch(console.error)\n\nexport async function createUser(username, password) {\n  try {\n    const response = await fetch(`${URL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password,\n        },\n      }),\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function loginUser(username, password) {\n  try {\n    const response = await fetch(`${URL}/users/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password,\n        },\n      }),\n    });\n    console.log(response, \"response\");\n    const data = await response.json();\n    console.log(data, \"data\");\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n// export const addComment = async (token, postId, comment)=>{\n//     try{\n//         const {success, error, data} = await callAPI (`${URL}/posts/${postId}`,{\n//             token: token,\n//             method: \"POST\",\n//             body:{\n//                 comment:{\n//                     content: comment\n//                 }\n\n//             }\n//         })\n//         if(success){\n//             return{\n//                 success:success,\n//                 error: null,\n//                 comment: data.comment,\n//             }\n//         }else{\n//             return{\n//                 success:success,\n//                 error:error.message,\n//                 comment:null\n//             }\n//         }\n//     }catch(error){\n//         console.error(`POST /${URL}/posts/${postId}/comments failed:`, error)\n//         return{\n//             success: success,\n//             error:\"Failed to create comment\",\n//             comment: null\n    \n//         };\n//     }\n// }\n\nexport const getGuest = async (token) => {\n    try {\n      const {success, error, data} = await callAPI('/users/me', {\n        token: token\n      });\n  \n      if (success) {\n        return {\n        error: null,\n        username: data.username\n        }\n      } else {\n        return {\n          error: error.message,\n          username: null\n        }\n      }\n    } catch (error) {\n      console.error('failed to fetch guest', error)\n  \n      return {\n        error: 'Failed to load username information',\n        username: null\n      };\n    }\n  };\n  \n  export const deletePost = async (token, postId) => {\n    try {\n      const {success, error, data} = await callAPI(`/posts/${postId}`, {\n        method: \"DELETE\",\n        token: token\n      });\n  \n        if (success) {\n          return {\n            error: null,\n            data: null\n          }; \n          } else {\n            return {\n              error: error.message,\n              data: null\n            };\n          }\n    }catch(error) {\n        console.error(\"DELETE /posts/postId failed:\", error);\n        return {\n          error: \"Failed to delete post\",\n          data: null\n        };\n    }\n  }\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}