{"ast":null,"code":"// import Register from \"./Register\"\nexport const apiKey = \"https://strangers-things.herokuapp.com/api/\";\nexport const cohortName = \"2207-FTB-ET-WEB-PT\";\nexport async function fetchPosts() {\n  try {\n    const data = await fetch(`${apiKey}${cohortName}/posts`);\n    const result = await data.json();\n    return result;\n  } catch (error) {}\n}\n\n// export async function NewPost(token, details) {\n\n//     //* might need to be in a try catch\n//         const response = await fetch (`${apiKey}${cohortName}/posts`,{\n//             method:\"POST\",\n//             headers:{\n//                 \"Content-Type\": \"application/json\",\n//                 Authorization: `Bearer ${token}`,\n//             },\n//             body: JSON.stringify({\n//                 post:{\n//                     title:details.title,\n//                     description: details.description,\n//                     location: details.location,\n//                     price: details.price,\n//                     willDeliver: details.willDeliver\n//                 }\n//             })\n//         }).then((response => response.json()))\n//         .then(result => {\n//           console.log(result)\n//         })\n//         .catch(console.error)\n//     }\nexport const NewPost = async (token, title, description, price, location, willDeliver) => {\n  try {\n    const post = {\n      description: description\n    };\n    if (location) {\n      post.location = location;\n    }\n    if (price) {\n      post.price = price;\n    }\n    if (willDeliver) {\n      post.willDeliver = willDeliver;\n    }\n    const {\n      success,\n      error,\n      data\n    } = await callAPI('/posts', {\n      token: token,\n      method: \"POST\",\n      body: {\n        post: {\n          title,\n          description,\n          price,\n          location,\n          willDeliver\n        }\n      }\n    });\n    if (success) {\n      return {\n        error: null,\n        post: data.post\n      };\n    } else {\n      return {\n        error: error.message,\n        post: null\n      };\n    }\n  } catch (error) {\n    console.error('Post /posts failed:', error);\n    return {\n      error: 'Failed to create Post',\n      post: null\n    };\n  }\n};\n\n//     const response = await fetch(`${apiKey}${cohortName}/posts`, {\n//     method: \"POST\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//       Authorization: `Bearer ${token}`,\n//     },\n//     body: JSON.stringify({\n//         post: {\n//             title:details.title,\n//             description: details.description,\n//             location: details.location,\n//             price: details.price,\n//             willDeliver: details.willDeliver\n//         }\n//     })\n//   }).then (response=>response.json ())\n//   .then(result =>{\n//     console.log(result);\n//   }).catch(console.error)\n_c = NewPost;\nexport async function createUser(username, password) {\n  try {\n    const response = await fetch(`${apiKey}${cohortName}/users/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function loginUser(username, password) {\n  try {\n    const response = await fetch(`${apiKey}${cohortName}/users/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password\n        }\n      })\n    });\n    console.log(response, \"response\");\n    const data = await response.json();\n    console.log(data, \"data\");\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"NewPost\");","map":{"version":3,"names":["apiKey","cohortName","fetchPosts","data","fetch","result","json","error","NewPost","token","title","description","price","location","willDeliver","post","success","callAPI","method","body","message","console","createUser","username","password","response","headers","JSON","stringify","user","loginUser","log"],"sources":["/Users/mitchelalejo/Desktop/Cohort2207/Week13/StrangersThings/src/api/api.js"],"sourcesContent":["// import Register from \"./Register\"\nexport const apiKey = \"https://strangers-things.herokuapp.com/api/\";\nexport const cohortName = \"2207-FTB-ET-WEB-PT\";\n\nexport async function fetchPosts() {\n  try {\n    const data = await fetch(`${apiKey}${cohortName}/posts`);\n    const result = await data.json();\n    return result;\n  } catch (error) {}\n}\n\n// export async function NewPost(token, details) {\n \n//     //* might need to be in a try catch\n//         const response = await fetch (`${apiKey}${cohortName}/posts`,{\n//             method:\"POST\",\n//             headers:{\n//                 \"Content-Type\": \"application/json\",\n//                 Authorization: `Bearer ${token}`,\n//             },\n//             body: JSON.stringify({\n//                 post:{\n//                     title:details.title,\n//                     description: details.description,\n//                     location: details.location,\n//                     price: details.price,\n//                     willDeliver: details.willDeliver\n//                 }\n//             })\n//         }).then((response => response.json()))\n//         .then(result => {\n//           console.log(result)\n//         })\n//         .catch(console.error)\n//     }\nexport const NewPost = async (token, title, description, price, location, willDeliver) => {\n\n    try {\n      const post = {\n        description: description\n      };\n  \n      if (location) {\n        post.location = location;\n      }\n  \n      if (price) {\n        post.price = price;\n      }\n  \n      if (willDeliver) {\n        post.willDeliver = willDeliver;\n      }\n  \n      const {success, error, data} = await callAPI('/posts', {\n        token: token,\n        method: \"POST\",\n        body: {\n          post: {\n          title,\n          description,\n          price,\n          location,\n          willDeliver\n          }\n        }\n        \n      });\n  \n      if (success) {\n        return {\n          error: null,\n          post: data.post\n        };\n      } else {\n        return {\n          error: error.message,\n          post: null\n        };\n      }\n    } catch (error) {\n      console.error('Post /posts failed:', error);\n  \n      return {\n        error: 'Failed to create Post',\n        post: null\n      }\n    }\n  };\n\n\n//     const response = await fetch(`${apiKey}${cohortName}/posts`, {\n//     method: \"POST\",\n//     headers: {\n//       \"Content-Type\": \"application/json\",\n//       Authorization: `Bearer ${token}`,\n//     },\n//     body: JSON.stringify({\n//         post: {\n//             title:details.title,\n//             description: details.description,\n//             location: details.location,\n//             price: details.price,\n//             willDeliver: details.willDeliver\n//         }\n//     })\n//   }).then (response=>response.json ())\n//   .then(result =>{\n//     console.log(result);\n//   }).catch(console.error)\n\n\nexport async function createUser(username, password) {\n  try {\n    const response = await fetch(`${apiKey}${cohortName}/users/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password,\n        },\n      }),\n    });\n    const data = await response.json()\n    return data\n\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function loginUser(username, password) {\n  try {\n    const response = await fetch(`${apiKey}${cohortName}/users/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        user: {\n          username: username,\n          password: password,\n        },\n      }),\n    });\n    console.log(response, \"response\");\n    const data = await response.json()\n    console.log(data, \"data\");\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}